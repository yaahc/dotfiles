" Load plugins that ship with Vim {{{1
runtime macros/matchit.vim
runtime ftplugin/man.vim

set t_Co=16

set tags+=tags;/

" Allow for tmux borked ctrl arrow keys {{{2
if &term =~? '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif
" }}}2

set backspace=indent,eol,start
set history=50
set incsearch
set ignorecase smartcase
set visualbell t_vb=
set hidden
set nojoinspaces
set nrformats=
set splitright
set switchbuf=useopen
set nowrap
xnoremap p pgvy

if has('mouse')
    " Don't want the mouse to work in insert mode.
    set mouse=nv
endif

set matchtime=0 "Dont jump around highlighting braces
let g:loaded_matchparen = 1

" Tab-completion in command-line mode {{{2
set wildmenu
set wildmode=longest:full
set completeopt=longest,menu,preview

" Appearance {{{2
set ruler
set showcmd
set laststatus=2
set encoding=utf-8
scriptencoding utf-8
set listchars=tab:â–¸\ ,trail:â€¢
set list
set relativenumber
set number
" When the terminal has colors, enable syntax+search highlighting
if &t_Co > 2 || has('gui_running')
    syntax on
    set hlsearch
endif
set winwidth=87
set winminwidth=20
set clipboard^=unnamedplus

" folding
set foldlevelstart=99
set foldmethod=syntax
set viewoptions=cursor,folds,slash,unix


" Indentation {{{2
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set cinoptions=l1

" Enable persistent undo {{{2
set undofile
set undodir=~/tmp/vim/undo
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), 'p')
endif

set nobackup
set noswapfile

" persistent macros {{{ 1
"
" === to make a new macro ===
" qq to start recording
" q to finish recording
" setup new binding like
" let @a = ''
" place cursor on first '
" then use the following command in normal mode
" "qp
" aka paste from register q after the current cursor
let @f = 'viwt(dds(' " delete function and corresponding parens, depends on vim-surround
let @h = '^xxxihlogstream(HLOG_INFO, "A");'
let @a = 'ciWautoA€kb -> +;'
let @i = 'ciWautoea = +lcs({^'

" leader mappings {{{1
" To show all commands that start with leader type :map <leader> " {{{2
" leader mappings
let g:mapleader = ' '

vnoremap . :norm .<CR>

" {{{2 wkm
let g:wkm = {
            \ 'name': '+leader-maps',
            \ '?': ['WhichKey ""', 'help-keybinds'],
            \ '$': 'strip-trailing-whitespace',
            \ '*': 'fzf-search-project-cword',
            \ 'h': 'show-cword-highlight-group',
            \ 'I': 'update-install-all-plugins',
            \ 'b': {'name': '+buffer'},
            \ }

nmap <leader>$ :call Preserve("%s/\\s\\+$//e")<CR>

let g:wkm_root = {
            \ 'name': 'JaneVim',
            \ ' ': g:wkm,
            \ '%': 'matching-bracket',
            \ }

if has('nvim')
    tnoremap <Esc><Esc> <C-\><C-n>
endif

" tabs & buffers {{{2
nnoremap <C-Left> :bprevious<CR>
nnoremap <C-Right> :bnext<CR>

" Turn off list chars, aka trailing spaces and visible tabs {{{2
nmap <silent> <leader>L :set list!<CR>
" Turn off search highlighting {{{2
nmap <silent> <leader>n :silent :nohlsearch<CR>

" misc
" keybinds to open last buffer {{{2
nmap <leader>v :vs#<cr>
nmap <silent> ]a :ALENext -wrap -error<cr>
nmap <silent> [a :ALEPrevious -wrap -error<cr>

" mapping to drop into substitute {{{2
let g:wkm.s = {'name': '+substitute'}
nnoremap <leader>ss :%s///g<Left><Left>
nnoremap <leader>sa :cdo s///g<Left><Left>

let g:wkm.z = {
            \ 'name': '+fold',
            \ 'o': 'only-current-function',
            \ 'z': 'show-and-center-cursor-line',
            \ }

" tmux mappings {{{2
" Assumes gdb will be open in another tmux session, and that it will be the
" previously selected pane in tmux
let g:wkm.d = {
            \ 'name': '+debugger/tmux-gdb',
            \ 'b': ['TmuxGdbBreak', 'break-at-current-line'],
            \ 'r': ['TmuxGdbRun', 'run'],
            \ 'u': ['TmuxGdbInput', 'input-cmd'],
            \ 'd': ['TmuxGdbInput', 'disable-all-breakpoints'],
            \ }


" indicate highlight groups under cursor {{{2
nnoremap <leader>h :CwordHighlightGroup<CR>

" custom refolder {{{2
nnoremap <leader>zs :call FoldNonSearch()<CR>
nnoremap <leader>zz zvzz
nnoremap <leader>zo zMzO

" search visual selection
vnoremap // y/\V<C-R>"<CR>

nnoremap <leader>R :!rg '<C-R>"' '%' > '<C-R>".rg.%:t'<CR>

" mode switcher
nnoremap <silent> <leader>mt :call DispatchSetupTest()<CR>:echo "Switched to test mode"<CR>
nnoremap <silent> <leader>mc :call DispatchSetupCheck()<CR>:echo "Switched to check mode"<CR>


nnoremap <leader>I :source ~/.vim/vimrc<CR>:PlugUpdate<CR>
" vim plug {{{1
" vim plug autoloader {{{2
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    augroup plugins
        au!
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    augroup END
endif

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" Load Plugins
call plug#begin('~/.vim/plugged')
" Basic common sense config
Plug 'tpope/vim-sensible' "{{{2


" adds keybinds to manipulate paired surrounding characters like ()
Plug 'tpope/vim-surround' "{{{2


" lets a lot of plugins repeat with ., the above for example
Plug 'tpope/vim-repeat' "{{{2


" motion based block commenting plugin
Plug 'tpope/vim-commentary' "{{{2
if has('autocmd')
    " commentary adjustment
    augroup commentary
        autocmd!
        autocmd FileType c,h,cpp,hpp,cs,java setlocal commentstring=//\ %s
    augroup END
endif

" easy navigation keybinds
Plug 'tpope/vim-unimpaired' "{{{2


" Git interface I massively underuse, mostly only use Gblame, GStatus is super
" epic and i know i should use it
Plug 'tpope/vim-fugitive' "{{{2
let g:wkm.G = {
            \ 'name' : '+git/version-control' ,
            \ 'b' : ['Gblame'                 , 'fugitive-blame']             ,
            \ 'B' : ['BCommits'               , 'commits-for-current-buffer'] ,
            \ 'C' : ['Gcommit'                , 'fugitive-commit']            ,
            \ 'd' : ['Gdiff'                  , 'fugitive-diff']              ,
            \ 'e' : ['Gedit'                  , 'fugitive-edit']              ,
            \ 'l' : ['Glog'                   , 'fugitive-log']               ,
            \ 'r' : ['Gread'                  , 'fugitive-read']              ,
            \ 's' : ['Gstatus'                , 'fugitive-status']            ,
            \ 'w' : ['Gwrite'                 , 'fugitive-write']             ,
            \ 'p' : ['Git push'               , 'fugitive-push']              ,
            \ 'y' : ['Goyo'                   , 'goyo-mode']                  ,
            \ }


" Projectionist plugin to let me jump around code, not really in use yet
" Plug 'tpope/vim-projectionist'


" Plug 'tpope/vim-speeddating' "{{{2


Plug 'tpope/vim-abolish'


" Fuzzy searching ripgrep and ctrlp and fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } "{{{2
Plug 'junegunn/fzf.vim'
let g:fzf_buffers_jump = 1
let g:fzf_tags_command = 'git ctags'
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_layout = { 'down': '~20%' }
let g:fzf_history_dir = '~/.local/share/fzf-history'

if executable('rg')
    set grepprg=rg\ --vimgrep\ --color=never
endif
set wildignore=*.pdf,*.fo,*.o,*.jpeg,*.jpg,*.png
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
set wildignore+=*/.git/*,*/tmp/*,*.swp,tags
set wildignore+=$HOME/Library/*
set suffixes=.otl

let g:wkm.f = {
            \ 'name': '+fzf',
            \ 't': 'fzf-tags-cword',
            \ }

nnoremap <C-p> :Files<CR>
nnoremap <leader>* :execute "Rgg! \\b".expand("<cword>")."\\b"<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fp :Files<CR>
nnoremap <leader>f~ :Files ~/<CR>
nnoremap <leader>fl :Lines<CR>
nnoremap <leader>fh :History<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>fa :Rgg<CR>
nnoremap <leader>fA :Rgg!<CR>
nnoremap <leader>fd :Rggg<CR>
nnoremap <leader>fD :Rggg!<CR>
nnoremap <leader>fT :Tags<CR>
nnoremap <leader>ft :call fzf#vim#tags(expand('<cword>')." ", {'options': '--exact --select-1 --exit-0'})<CR>
nnoremap <leader>fs :Snippets<CR>


Plug 'dbakker/vim-projectroot' "{{{2


Plug 'junegunn/vader.vim' "{{{2


" Code Formatting Plugins
Plug 'tell-k/vim-autopep8' "{{{2
let g:autopep8_max_line_length=79
let g:autopep8_aggressive=2


Plug 'hynek/vim-python-pep8-indent'


" " Pydocstring
Plug 'heavenshell/vim-pydocstring'
let g:wkm.p = {
            \ 'name': '+python',
            \ 'd' : ['<Plug>(pydocstring)', 'auto-document-current-fn'],
            \ }


" Plug 'rhysd/vim-clang-format' "{{{2

" Super useful, lets you navigate between tmux panes and vim panes with the
" same keybinds (ctrl +hjkl) who cares what type of pane it is!!!
Plug 'christoomey/vim-tmux-navigator' "{{{2


Plug 'tmux-plugins/vim-tmux-focus-events'


Plug 'roxma/vim-tmux-clipboard'


" VCS agnostic sign gutter plugin
Plug 'mhinz/vim-signify' "{{{2


Plug 'bling/vim-airline' "{{{2
Plug 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_solarized_bg='dark'
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
" let g:airline#extensions#gutentags#enabled = 1


Plug 'octol/vim-cpp-enhanced-highlight' "{{{2


" NERD tree will be loaded on the first invocation of NERDTreeToggle command
Plug 'scrooloose/nerdtree' "{{{2
Plug 'xuyuanp/nerdtree-git-plugin'
" enable line numbers
let g:NERDTreeShowLineNumbers=1
" make sure relative line numbers are used
augroup nerdtree
    autocmd!
    autocmd FileType nerdtree setlocal relativenumber
augroup END


Plug 'majutsushi/tagbar' "{{{2

" Plug 'ludovicchabant/vim-gutentags'

Plug 'mattn/webapi-vim'

Plug 'rust-lang/rust.vim' "{{{2
" let g:rustfmt_autosave = 1
Plug 'vim-autoformat/vim-autoformat'
augroup autoformat
    au BufWrite *.rs :Autoformat
augroup END

let wkm['r'] = {
            \ 'name': '+rust',
            \ 'f': ['!cargo fix', 'fix'],
            \ }


Plug 'cespare/vim-toml', {'branch': 'main'}


" Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" extensions
Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
" Plug 'neoclide/coc-rls', {'do': 'yarn install --frozen-lockfile'}
Plug 'fannheyward/coc-rust-analyzer', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-sources', {'do': 'yarn install --frozen-lockfile'}

" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
" utf-8 byte sequence
set encoding=utf-8
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
            \ coc#pum#visible() ? coc#pum#next(1) :
            \ CheckBackspace() ? "\<Tab>" :
            \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[q` and `]q` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [q <Plug>(coc-diagnostic-prev)
nmap <silent> ]q <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>crn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s)
    autocmd FileType typescript,json,rust setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>ca  <Plug>(coc-codeaction-selected)
nmap <leader>ca  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>cac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>cas  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>cqf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>cre <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>cr  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>cr  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" " Mappings for CoCList
" " Show all diagnostics
" nnoremap <silent><nowait> <leader>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions
" nnoremap <silent><nowait> <leader>e  :<C-u>CocList extensions<cr>
" " Show commands
" nnoremap <silent><nowait> <leader>c  :<C-u>CocList commands<cr>
" " Find symbol of current document
" nnoremap <silent><nowait> <leader>o  :<C-u>CocList outline<cr>
" " Search workspace symbols
" nnoremap <silent><nowait> <leader>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item
" nnoremap <silent><nowait> <leader>j  :<C-u>CocNext<CR>
" " Do default action for previous item
" nnoremap <silent><nowait> <leader>k  :<C-u>CocPrev<CR>
" " Resume latest coc list
" nnoremap <silent><nowait> <leader>p  :<C-u>CocListResume<CR>

" " Better display for messages
" set cmdheight=2

" " Smaller updatetime for CursorHold & CursorHoldI
" set updatetime=300

" " don't give |ins-completion-menu| messages.
" set shortmess+=c

" " always show signcolumns
" set signcolumn=yes

" " Use tab for trigger completion with characters ahead and navigate.
" " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" inoremap <silent><expr> <TAB>
"             \ pumvisible() ? "\<C-n>" :
"             \ <SID>check_back_space() ? "\<TAB>" :
"             \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"     let col = col('.') - 1
"     return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" let g:wkm.c = {
"             \ 'name': '+coc',
"             \ 'a': 'Show all diagnostics',
"             \ 'e': 'Manage extensions',
"             \ 'c': 'Show commands',
"             \ 'o': 'Find symbol of current document',
"             \ 's': 'Search workspace symbols',
"             \ 'j': 'Do default action for next item',
"             \ 'k': 'Do default action for previous item',
"             \ 'p': 'Resume latest coc list',
"             \ 'C': 'Configure coc',
"             \ }

" autocmd FileType json syntax match Comment +\/\/.\+$+

" " Use <c-space> for trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" " Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" " Use `[c` and `]c` for navigate diagnostics
" nmap <silent> [d <Plug>(coc-diagnostic-prev)
" nmap <silent> ]d <Plug>(coc-diagnostic-next)

" " Remap keys for gotos
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" " Use <C-l> to trigger snippet expand.
" imap <C-j> <Plug>(coc-snippets-expand-jump)
" " Use <C-j> to select text for visual text of snippet.
" vmap <C-j> <Plug>(coc-snippets-select)
" " Use <C-j> to jump to forward placeholder, which is default
" let g:coc_snippet_next = '<c-j>'
" " Use <C-k> to jump to backward placeholder, which is default
" let g:coc_snippet_prev = '<c-k>'
" " imap <C-j> <Plug>(coc-snippets-expand-jump)

" " Use K for show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"     if &filetype == 'vim'
"         execute 'h '.expand('<cword>')
"     else
"         call CocAction('doHover')
"     endif
" endfunction

" " Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" " Remap for rename current word
" nmap <leader>cr <Plug>(coc-rename)

" " Remap for format selected region
" vmap <leader>cf  <Plug>(coc-format-selected)
" nmap <leader>cf  <Plug>(coc-format-selected)

" augroup mygroup
"     autocmd!
"     " Setup formatexpr specified filetype(s).
"     autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"     " Update signature help on jump placeholder
"     autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end

" " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
" vmap <leader>ca  <Plug>(coc-codeaction-selected)
" nmap <leader>ca  <Plug>(coc-codeaction-selected)

" " Remap for do codeAction of current line
" nmap <leader>cac  <Plug>(coc-codeaction)
" " Fix autofix problem of current line
" nmap <leader>cq  <Plug>(coc-fix-current)

" " Use `:Format` for format current buffer
" command! -nargs=0 Format :call CocAction('format')

" " Use `:Fold` for fold current buffer
" command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" " Add diagnostic info for https://github.com/itchyny/lightline.vim
" let g:lightline = {
"             \ 'colorscheme': 'wombat',
"             \ 'active': {
"             \   'left': [ [ 'mode', 'paste' ],
"             \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
"             \ },
"             \ 'component_function': {
"             \   'cocstatus': 'coc#status'
"             \ },
"             \ }



" " Using CocList
" nnoremap <silent> <space>cl  :<C-u>CocList<cr>
" " Show all diagnostics
" nnoremap <silent> <space>ca  :<C-u>CocList diagnostics<cr>
" " Manage extensions
" nnoremap <silent> <space>ce  :<C-u>CocList extensions<cr>
" " Show commands
" nnoremap <silent> <space>cc  :<C-u>CocList commands<cr>
" " Find symbol of current document
" nnoremap <silent> <space>co  :<C-u>CocList outline<cr>
" " Search workspace symbols
" nnoremap <silent> <space>cs  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent> <space>cj  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent> <space>ck  :<C-u>CocPrev<CR>
" " Resume latest coc list
" nnoremap <silent> <space>cp  :<C-u>CocListResume<CR>
" " Configure coc
" nnoremap <silent> <space>cC :<C-u>CocConfig<CR>

Plug 'w0rp/ale' "{{{2
let g:ale_linters = {
            \ 'rust': [],
            \ 'cpp':      ['rscmake', 'cppcheck',     'clangtidy', 'gcovcheck'],
            \ 'go':       ['gobuild', 'gofmt',        'golint',    'gometalinter', 'gosimple',    'gotype',   'govet'],
            \ }
" \ 'rust':     ['cargo'],

let g:ale_echo_msg_format = '%code: %%s %linter%'
let g:ale_cpp_gcc_options = '-std=c++14 -Wall -IGL'
let g:ale_fixers = {
            \ 'sh':       ['shfmt'],
            \ 'markdown': ['prettier'],
            \ 'python':   ['add_blank_lines_for_python_control_statements', 'black'],
            \ 'haskell':  ['brittany']
            \ }
let g:ale_fix_on_save = 1
let g:ale_proto_protoc_gen_lint_options=''
let g:ale_sh_shfmt_options = '-i 4'
let g:ale_sign_info = 'X'
let g:ale_set_loclist = 1

let g:ale_rust_cargo_check_all_targets = 1
let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')
" let g:ale_rust_cargo_clippy_options = '--all-targets'

" autocmd FileType rust call s:DisableRustAutoLinting()

Plug 'tpope/vim-dispatch' "{{{2

let g:wkm.a = {
            \ 'name': '+async',
            \ 'c': 'open-dispatch-errors',
            \ 'C': 'run-unit-and-get-coverage',
            \ }

nnoremap <leader>ac :Copen<CR>
nnoremap <leader>aq :cfirst<CR>
nnoremap <leader>aC :Dispatch covrun %:p<CR>



" Plug 'sirver/ultisnips' "{{{2
Plug 'honza/vim-snippets'
" let g:UltiSnipsExpandTrigger='<NL>'
" let g:UltiSnipsListSnippets = '<C-u>'
" let g:UltiSnipsJumpForwardTrigger='<CR>'
" let g:UltiSnipsJumpBackwardTrigger='<C-k>'
" let g:UltiSnipsEditSplit='vertical'
" let g:UltiSnipsRemoveSelectModeMappings = 0


Plug 'solarnz/thrift.vim' "{{{2


Plug 'flazz/vim-colorschemes' "{{{2
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16-vim'

let base16colorspace=256


Plug 'Shougo/neoinclude.vim' "{{{2
let g:neoinclude#paths = {}
let g:neoinclude#paths.cpp = '~/git/scale-product/daemons/scribed'
if !exists('g:neoinclude#exts')
    let g:neoinclude#exts = {}
endif
let g:neoinclude#exts.cpp = ['', 'h', 'hpp', 'hxx']

" Plug 'fatih/vim-go' "{{{2


" Plug 'google/vim-maktaba'
" Plug 'google/vim-coverage'


" Javascript {{{2
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'gavocanov/vim-js-indent'
Plug 'mxw/vim-jsx'
Plug 'othree/javascript-libraries-syntax.vim'


" Plug 'git+ssh://gerrit.lab.local:29418/scbuild', { 'do': './install.sh --update-rc' } " {{{2


Plug 'suan/vim-instant-markdown', { 'on': 'InstantMarkdownPreview' } " {{{2
let g:instant_markdown_autostart = 0


Plug 'neovimhaskell/haskell-vim' " {{{2


Plug 'liuchengxu/vim-which-key' " {{{2


Plug 'junegunn/vim-easy-align' " {{{2
let  g:wkm['e'] =['vert help easy-align', '+EasyAlign(ga)']
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
vmap <Enter> <Plug>(EasyAlign)


let g:wkm['T'] = {
            \ 'name': '+toggle',
            \ 'i':    ['IndentGuidesToggle', 'indent-guide'],
            \ 'I':    [':CocCommand document.toggleInlayHint', 'toggle-inlay-hints'],
            \ 'p':    ['setlocal paste!',    'paste-mode'],
            \ 't':    ['TagbarToggle',       'tagbar'],
            \ 'n':    [':NERDTreeToggle',     'NERDTree'],
            \ 'm':    ['InstantMarkdownPreview', 'markdown-preview'],
            \ }


" Plug 'vim-scripts/restore_view.vim'


" Plug 'zxqfl/tabnine-vim'


Plug 'stephpy/vim-yaml'


Plug 'janko-m/vim-test'
nnoremap <silent> <leader>tn :TestNearest<CR>
nnoremap <silent> <leader>tf :TestFile<CR>
nnoremap <silent> <leader>ts :TestSuite<CR>
nnoremap <silent> <leader>tl :TestLast<CR>
nnoremap <silent> <leader>tg :TestVisit<CR>


Plug 'rhysd/vim-clang-format'


Plug 'pprovost/vim-ps1'

Plug '~/git/truffle.vim'

call plug#end() " insert above here {{{2


" Post plug configuration {{{2
" whichkey {{{3
call which_key#register('<Space>', 'g:wkm')
call which_key#register('', 'g:wkm_root')
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
set timeoutlen=500
let g:which_key_flatten = 1

" Fugitive post load {{{3
if has('autocmd')
    " Auto-close fugitive buffers
    augroup fugitive
        autocmd!
        autocmd BufReadPost fugitive://* set bufhidden=delete
        " Navigate up one level from fugitive trees and blobs
        autocmd User fugitive
                    \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
                    \   nnoremap <buffer> .. :edit %:h<CR> |
                    \ endif
    augroup END
endif

" fzf {{{3
command! -bang -nargs=* Rgg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=never '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview('up:60%')
            \           : fzf#vim#with_preview('right:50%', '?'),
            \   <bang>0)

command! -bang -nargs=* Rggg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=never '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
            \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%', '?'),
            \   <bang>0)


" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)


" Custom commands {{{1
" Strip trailing whitespace {{{2
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let l:_s=@/
    let l:l = line('.')
    let l:c = col('.')
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=l:_s
    call cursor(l:l, l:c)
endfunction

function! JumpToFile(fileline)
    let filename=split(a:fileline,":")[0]
    let true_filename=system('rg --files -g ' . filename)
    let linenumber=split(a:fileline,":")[1]
    execute "edit +" . linenumber . " " . true_filename
endfunction
nnoremap <leader>J :call JumpToFile(@")<CR>
" DRSD.cpp:120


" Escape and paste a register {{{2
" <c-x>{char} - paste register into search field, escaping sensitive chars
" http://stackoverflow.com/questions/7400743/
cnoremap <c-x> <c-r>=<SID>PasteEscaped()<cr>
function! s:PasteEscaped()
    echo "\\".getcmdline()."\""
    let l:char = getchar()
    if l:char ==# "\<esc>"
        return ''
    else
        let l:register_content = getreg(nr2char(l:char))
        let l:escaped_register = escape(l:register_content, '\'.getcmdtype())
        return substitute(l:escaped_register, '\n', '\\n', 'g')
    endif
endfunction

function! DeleteHiddenBuffers() " {{{2
    let l:tpbl=[]
    let l:closed = 0
    call map(range(1, tabpagenr('$')), 'extend(l:tpbl, tabpagebuflist(v:val))')
    for l:buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(l:tpbl, v:val)==-1')
        if getbufvar(l:buf, '&mod') == 0
            silent execute 'bwipeout' l:buf
            let l:closed += 1
        endif
    endfor
    echo 'Closed '.l:closed.' hidden buffers'
endfunction
nnoremap <leader>bD :call DeleteHiddenBuffers()<CR>

function! DispatchSetupTest()
    if &filetype == 'cpp'
        let b:dispatch = 'covrun %:p'
    elseif &filetype == 'rust'
        let b:dispatch = 'cargo test'
    endif
endfunction


function! DispatchSetupCheck()
    if &filetype == 'cpp'
        let b:dispatch = 'rscmake %:p'
    elseif &filetype == 'rust'
        let b:dispatch = 'cargo fix --clippy'
    endif
endfunction

" augroup DispatchSetupGroup
"     autocmd!
"     au BufNewFile,BufRead * call DispatchSetupTest()
" augroup END

function! SetupCppEnvironment() " {{{2
    let l:path = expand('%:p')
    if l:path =~# $SC_GIT_ROOT
        let b:dispatch = 'rscmake %:p'
        compiler rscmake
    elseif l:path =~# $HOME.'/git/notjobless'
        let b:dispatch = './make.sh'
    elseif !empty(glob('./CMakeLists.txt')) && !empty(glob('./build'))
        if empty(glob('./compile_commands.json'))
            let g:ale_cpp_clangtidy_checks = ['*']
        endif
        let b:dispatch = 'cmake --build build/'
    endif
endfunction


function! SetupRustEnvironment() " {{{2
    let l:path = getcwd()
    if l:path =~# $HOME.'/git/rust/tracing'
        let b:rust_recommended_style = 0
        set textwidth=80
    endif
    let b:dispatch = 'cargo test'
    set makeprg=cargo\ build
endfunction


function! Formatonsave() " {{{2
    let l:formatdiff = 1
    " git clone https://github.com/llvm-mirror/clang
    pyf ~/git/clang/tools/clang-format/clang-format.py
endfunction


function! s:exercism_tests() " {{{2
    if expand('%:e') ==# 'vim'
        let testfile = printf('%s/%s.vader', expand('%:p:h'),
                    \ tr(expand('%:p:h:t'), '-', '_'))
        if !filereadable(testfile)
            echoerr 'File does not exist: '. testfile
            return
        endif
        source %
        execute 'Vader' testfile
    else
        let sourcefile = printf('%s/%s.vim', expand('%:p:h'),
                    \ tr(expand('%:p:h:t'), '-', '_'))
        if !filereadable(sourcefile)
            echoerr 'File does not exist: '. sourcefile
            return
        endif
        execute 'source' sourcefile
        Vader
    endif
endfunction


function! <SID>AutoProjectRootCD() " {{{2
    try
        if &filetype !=# 'help'
            ProjectRootCD
        endif
    catch
        " Silently ignore invalid buffers
    endtry
endfunction


function! s:DisableRustAutoLinting() " {{{2
    ALEDisableBuffer
endfunction

" {{{3
command! TmuxGdbBreak silent exec "!tmux send-keys -t \\! 'br ' " . expand('%:t') . ':' . line('.') . ' Enter'
command! TmuxGdbRun silent exec "!tmux send-keys -t \\! 'run' Enter"
command! TmuxGdbDisable silent exec "!tmux send-keys -t \\! 'dis' Enter"
function! TmuxGdbInput()
    let l:cmd = input('Enter gdb command: ')
    silent exec "!tmux send-keys -t \\! '".l:cmd."' Enter"
endfunction " }}}3


function! FoldNonSearch() " {{{2
    let l:l = line('.')
    let l:c = col('.')

    %foldclose!
    g//normal! zv

    call cursor(l:l, l:c)
endfunction

" cword highlight func {{{2
command! CwordHighlightGroup echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"

function! ExecuteMacroOverVisualRange()
    echo "@".getcmdline()
    execute ":'<,'>normal @".nr2char(getchar())
endfunction

" Autocommands " {{{1
if has('autocmd') " {{{ 2
    filetype plugin indent on
    augroup shell
        autocmd!
        au BufNewFile,BufRead *.d set filetype=sh
    augroup END
    augroup vimrcEx
        au!
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif
    augroup END

    " " Prevent the cursor from droping back one character after exiting insert mode
    " " as possible
    " let g:CursorColumnI = 0 "the cursor column position in INSERT
    " augroup cursorfix
    "     au!
    "     autocmd InsertEnter * let CursorColumnI = col('.')
    "     autocmd CursorMovedI * let CursorColumnI = col('.')
    "     autocmd InsertLeave * if col('.') != CursorColumnI | call cursor(0, col('.')+1) | endif
    "     autocmd BufDelete * call airline#extensions#tabline#buflist#invalidate()
    " augroup END
else
    set autoindent " always set autoindenting on
endif


augroup jane-dispatch " {{{ 2
    autocmd!
    autocmd FileType rust call SetupRustEnvironment()
    autocmd FileType go let b:dispatch = 'go build %'
    autocmd FileType cpp call SetupCppEnvironment()
augroup END


augroup format " {{{ 2
    autocmd!
    autocmd BufWritePre *.h,*.cc,*.cpp call Formatonsave()
augroup END


augroup vader " {{{ 2
    autocmd!
    autocmd BufRead *.{vader,vim}
                \ command! -buffer Test call s:exercism_tests()
augroup END


augroup ProjectRootCD " {{{ 2
    autocmd!
    autocmd BufEnter * call <SID>AutoProjectRootCD()
augroup END

set cursorline
" color scheme stuff {{{1
augroup CursorManagement
    " this one is which you're most likely to use?
    autocmd FileType gitcommit set nocursorline
augroup end

if filereadable(expand('~/.vimrc_background'))
    let base16colorspace=256
    source ~/.vimrc_background
endif
colorscheme base16-default-dark

hi CocHighlightText ctermbg=232 cterm=underline


" highlight lines in Sy and vimdiff etc.)
" highlight link SignifyLineAdd             DiffAdd
" highlight link SignifyLineChange          DiffChange
" highlight link SignifyLineDelete          DiffDelete
" highlight link SignifyLineChangeDelete    SignifyLineChange
" highlight link SignifyLineDeleteFirstLine SignifyLineDelete
" highlight link SignifySignAdd             DiffAdd
" highlight link SignifySignChange          DiffChange
" highlight link SignifySignDelete          DiffDelete
" highlight link SignifySignChangeDelete    SignifySignChange
" highlight link SignifySignDeleteFirstLine SignifySignDelete
" highlight ALEErrorSign ctermfg=1 cterm=reverse
" highlight ALEWarningSign ctermfg=3 cterm=reverse
" highlight link ALEInfoSign SignColumn
" highlight ALEError cterm=reverse ctermfg=1
" highlight ALEWarning cterm=reverse ctermfg=3
" highlight link ALEInfo SpellBad
